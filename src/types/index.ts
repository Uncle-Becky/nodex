// Auto-generated type definitions
// Generated by auto-define tool

// Core types
export type {
  AgentBeliefs,
  AgentId,
  AgentMetrics,
  AgentState,
  AgentStatus,
  AgentType,
  CanvasAgentState,
  CanvasId,
  EdgeData,
  Position,
  ReasoningAgentState,
  SwarmAgentState,
  WorkerAgentState,
} from './agents';

// Bus types
export type { BusEvent, BusEventType, EventBus } from './bus';

// Message types
export type {
  AgentPercept,
  AgentResponse,
  AgentWorkerMessage,
  AgentBeliefs as MessageAgentBeliefs,
  AgentStatus as MessageAgentStatus,
  UiMessage,
} from './messages';

// LLM types
export type {
  LLMCapability,
  LLMConfig,
  LLMError,
  LLMExecutionContext,
  LLMFunction,
  LLMMessage,
  LLMMetrics,
  LLMProvider,
  LLMRequest,
  LLMResponse,
  LLMStreamChunk,
  LLMTask,
} from './llm';

// Node types
export type {
  ApiConnectorNodeConfig,
  BaseNodeConfig,
  CodeExecutorNodeConfig,
  DataProcessorNodeConfig,
  FileProcessorNodeConfig,
  ImageAnalyzerNodeConfig,
  LLMChatNodeConfig,
  LLMCompletionNodeConfig,
  MemoryBankNodeConfig,
  NodeCapability,
  NodeConfig,
  NodeExecution,
  NodeTemplate,
  NodeType,
  TextAnalyzerNodeConfig,
  WebScraperNodeConfig,
  WorkflowControllerNodeConfig,
} from './nodes';

// Utility types - these are built-in TypeScript utility types
export type DeepPartial<T> = {
  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

export type Optional<T, K extends keyof T> = Omit<T, K> & {
  [P in K]?: T[P];
};

export type OptionalKeys<T> = {
  [K in keyof T]-?: { 0: 0 } extends Pick<T, K> ? K : never;
}[keyof T];

export type PickOptional<T, K extends keyof T> = Pick<T, K> & {
  [P in Exclude<keyof T, K>]?: T[P];
};

export type PickRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P];
};

export type RequiredKeys<T> = {
  [K in keyof T]-?: { 0: 0 } extends Pick<T, K> ? never : K;
}[keyof T];

export type Serializable =
  | string
  | number
  | boolean
  | null
  | SerializableObject
  | SerializableArray;

export type SerializableArray = Serializable[];

export type SerializableObject = { [key: string]: Serializable };

export type SerializablePrimitive = string | number | boolean | null;

// Worker types
export type { Worker } from './workers';

export type React = unknown;

export interface HTMLInputElement {
  id: string;
}

export interface JSON {
  id: string;
}

export interface EdgeLabelRenderer {
  id: string;
}

export interface ReactDOM {
  id: string;
}

export class URL {
  constructor() {
    // TODO: Implement constructor
  }

  // TODO: Add methods and properties
}

export type NodeChange = unknown;

export type EdgeChange = unknown;

export type Implement = unknown;

export type Add = unknown;

export type Record = unknown;

export type Map<T> = { [key: string]: T };

export interface Object {
  id: string;
}

export type Services = unknown;

export type Failed = unknown;

export interface String {
  id: string;
}

export class Uint8Array {
  constructor() {
    // TODO: Implement constructor
  }

  // TODO: Add methods and properties
}

export type AbortSignal = unknown;

export type RequestInit = unknown;

export type Partial = unknown;

export class RegExp {
  constructor() {
    // TODO: Implement constructor
  }

  // TODO: Add methods and properties
}

export class Function {
  constructor() {
    // TODO: Implement constructor
  }

  // TODO: Add methods and properties
}

export type AsyncGenerator = unknown;

export type Available = unknown;

export class TextDecoder {
  constructor() {
    // TODO: Implement constructor
  }

  // TODO: Add methods and properties
}

export type Already = unknown;

export type Starting = unknown;

export type Checking = unknown;
